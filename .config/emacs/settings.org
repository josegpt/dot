#+TITLE: Emacs Config

* Initialize
#+begin_src emacs-lisp
(require 'package)
(require 'cl-lib)
#+end_src
* Repositories
#+begin_src emacs-lisp
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
#+end_src
* Packages Installation
#+begin_src emacs-lisp
(defvar my-packages
'(
badwolf-theme
company
counsel
expand-region
exwm
js2-mode
magit
move-text
powerline
rainbow-delimiters
smartparens
)
  "A list of packages to ensure are installed at launch.")

(defun my-packages-installed-p ()
  (cl-loop for p in my-packages
           when (not (package-installed-p p)) do (cl-return nil)
           finally (cl-return t)))

(unless (my-packages-installed-p)
  ;; check for new packages (package versions)
  (package-refresh-contents)
  ;; install the missing packages
  (dolist (p my-packages)
    (when (not (package-installed-p p))
      (package-install p))))
#+end_src
* Theme
#+begin_src emacs-lisp
(load-theme 'badwolf t)
#+end_src
* Company
#+begin_src emacs-lisp
(add-hook 'after-init-hook 'global-company-mode)
#+end_src
* Counsel
#+begin_src emacs-lisp
(ivy-mode 1)
(setq ivy-use-virtual-buffers t)
(setq enable-recursive-minibuffers t)
(global-set-key "\C-s" 'swiper)
(global-set-key (kbd "C-c C-r") 'ivy-resume)
(global-set-key (kbd "<f6>") 'ivy-resume)
(global-set-key (kbd "M-x") 'counsel-M-x)
(global-set-key (kbd "C-x C-f") 'counsel-find-file)
(global-set-key (kbd "<f1> f") 'counsel-describe-function)
(global-set-key (kbd "<f1> v") 'counsel-describe-variable)
(global-set-key (kbd "<f1> o") 'counsel-describe-symbol)
(global-set-key (kbd "<f1> l") 'counsel-find-library)
(global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
(global-set-key (kbd "<f2> u") 'counsel-unicode-char)
(global-set-key (kbd "C-c g") 'counsel-git)
(global-set-key (kbd "C-c j") 'counsel-git-grep)
(global-set-key (kbd "C-c k") 'counsel-ag)
(global-set-key (kbd "C-x l") 'counsel-locate)
(global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
(define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
#+end_src
* Expand Region
#+begin_src emacs-lisp
(require 'expand-region)
(global-set-key (kbd "C-@") 'er/expand-region)
#+end_src
* JS2-Mode
#+begin_src emacs-lisp
(add-hook 'js-mode-hook 'js2-minor-mode)
(add-to-list 'interpreter-mode-alist '("node" . js2-mode))
#+end_src
* Move Text
#+begin_src emacs-lisp
(require 'move-text)
(global-set-key (kbd "M-p") 'move-text-up)
(global-set-key (kbd "M-n") 'move-text-down)
#+end_src
* Powerline
#+begin_src emacs-lisp
(require 'powerline)
(powerline-center-theme)
#+end_src
* Rainbow Delimiters
#+begin_src emacs-lisp
(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
#+end_src
* Smartparens
#+begin_src emacs-lisp
(add-hook 'prog-mode-hook #'smartparens-strict-mode)
#+end_src
* Toggle off emacs gui
#+begin_src emacs-lisp
(menu-bar-mode 0)
(tool-bar-mode 0)
(setq initial-scratch-message nil)
(setq inhibit-startup-message t)
#+end_src
* Backups
#+begin_src emacs-lisp
(setq backup-directory-alist '(("." . "~/.cache/emacs/undodir")))
(setq backup-by-copying t)
#+end_src
